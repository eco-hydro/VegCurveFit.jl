var documenterSearchIndex = {"docs":
[{"location":"#VegCurveFit.jl","page":"Home","title":"VegCurveFit.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"nlminb\nfindpeaks\nwBisquare_Kong2023\ncal_diag\n\nwhit2_cv\nwhit2\nwhit2!","category":"page"},{"location":"#VegCurveFit.nlminb","page":"Home","title":"VegCurveFit.nlminb","text":"nlminb(start, objective, ...; )\n\nArguments\n\nargs: Other parameters to objective, e.g. t, y, w, FUN\nfevalmax, itermax: The default value in fortran is 200 and 150. But they \n\nare set to 1000 at here.\n\nReturn\n\npar\nobjective\nconvergence: \n0: convergent\n1: not convergent\niterations\nevaluations\n\nReferences\n\nDavid M. Gay (1990), Usage summary for selected optimization routines. Computing Science Technical Report 153, AT&T Bell Laboratories, Murray Hill.\nhttp://www.netlib.org/port/\n\nExample\n\nt = Array(1.0:8:366)\ny = doubleLog_Beck(par, t)\nypred = doubleLog_Beck(par0, t)\npar0 = [0.05, 0.6, 45, 0.1, 200, 0.2]\n@time opt_par = nlminb(par0, goal!, doubleLog_Beck!, y, t, ypred, \n    feval_max = 1000, iter_max = 1000)\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.findpeaks","page":"Home","title":"VegCurveFit.findpeaks","text":"findpeaks(x::AbstractVector{T};\n    nups::Int=1,\n    ndowns::Int=nups,\n    zerostr::Char='0',\n    peakpat=nothing, \n    verbose=false,\n    options...)\n\nExamples\n\nReferences\n\nGerhard Aigner, https://github.com/halleysfifthinc/Peaks.jl/issues/11#issuecomment-689998279\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.wBisquare_Kong2023","page":"Home","title":"VegCurveFit.wBisquare_Kong2023","text":"wBisquare(y, yfit, w; iter = 2, wmin, to_upper = true)\n\nArguments\n\niter    : not used\noptions : currently ignored\n\nBad points\n\nunder the yfit, in the growing season (yfit > 0.3 * A + ymin)\n\nExamples\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.cal_diag","page":"Home","title":"VegCurveFit.cal_diag","text":"retrieve the diagonal of the inverse of a banded matrix B\n\n一种带状矩阵对角阵的快速算法，用于Whittaker smoother求解。\n\nB = (U * D * U)                         Hutchinson 1985 Eq 31\nB^(-1) = B * U^(-1) + (1 - U) * B^(-1)  Hutchinson 1985 Eq 33\n\nArguments\n\nU: A = L D L' = U' * D * U. Note U = L'!\n\nU = [\n  1 c₁ e₁ f₁ 0\n  0 1  c₂ e₂ f₂\n  0 0  1  c₃ e₃\n  0 0  0  1  c₄\n  0 0  0  0  1]\nU2 = [\n  c₁ e₁ f₁ 0\n  c₂ e₂ f₂ 0\n  c₃ e₃ 0  0\n  c₄ 0  0  0 \n  0  0  0  0 ]\n\nDongdong Kong, CUG, 2024-05-07\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.whit2_cv","page":"Home","title":"VegCurveFit.whit2_cv","text":"R version Whittaker Cross validation\n\nWhittaker smoothing with second order differences Computation of the hat diagonal (Hutchinson and de Hoog, 1986)\n\nIn : data vector (y), weigths (w), smoothing parameter (lambda)\nOut: list with smooth vector (z), hat diagonal (dhat)\n\n#author:  Gianluca Frasso and Paul HC Eilers, 2015\n\n#references\n\nGianluca Frasso and Paul HC Eilers, L- and V-curves for optimal smoothing, 2015\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.whit2","page":"Home","title":"VegCurveFit.whit2","text":"whit2(y::AbstractVector{T}, w::AbstractVector{T2}, lambda::Float64; include_cve=true)\n\nz, cve = whit2(y, w;lambda=2.0) whit2(y, w; lambda) whit2(y, w; lambda)\n\n\n\n\n\n","category":"function"},{"location":"#VegCurveFit.whit2!","page":"Home","title":"VegCurveFit.whit2!","text":"Second-order differences Whittaker-Henderson smoothing\n\nLU decompose was used.\n\nAx = y A = LU, LUx = y  let b = Ux, Lb = y\n\nReferences\n\n'Smoothing and interpolation with finite differences' Eilers P. H. C, 1994\n\n\n\n\n\n","category":"function"}]
}
